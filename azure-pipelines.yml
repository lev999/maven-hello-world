# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

variables:
- name: artifact_tag
  value: error value 
- name: tag_const_part
  value: my-app-1.0.

pool:
  vmImage: ubuntu-latest

steps:
#- task: Maven@3
#  displayName: 'update tag'
#  inputs:
#    mavenPomFile: 'my-app/pom.xml'
#    mavenOptions: '-Xmx3072m'
#    javaHomeOption: 'JDKVersion'
#    jdkVersionOption: '1.8'
#    jdkArchitectureOption: 'x64'
#    publishJUnitResults: true
#    testResultsFiles: '**/surefire-reports/TEST-*.xml'
#    goals: 'release:update-versions'

- task: Maven@3
  displayName: 'build artifact with Maven'
  inputs:
    mavenPomFile: 'my-app/pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'clean install'

- script: |
  displayName: parse artifact tag 
    fullname=$(ls my-app/target/$tag_const_part*);
    cutFront=${fullname##'my-app/target/$tag_const_part'};
    cutFrontBack=${cutFront%%.jar};
    tag=$cutFrontBack;
    echo "##vso[task.setvariable variable=artifact_tag]$tag"
    echo var=$(artifact_tag)


- script: |
      echo taaag=$(artifact_tag) 
  displayName: print tag

- task: Docker@2
  displayName: $(artifact_tag)
  inputs:
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    containerRegistry: 'docker-hub'
    repository: levka123/rafael
    tags: $(artifact_tag) 

- script: |
    echo var=$(artifact_tag)
    docker pull levka123/rafael:$(artifact_tag)
    docker run levka123/rafael:$(artifact_tag) bash -c "java -jar /opt/mycompany/app/my-app-1.0.$(artifact_tag).jar"
  displayName: 'pull and run docker image'
